function requestDeviceMotion(callback) {
	if (window.DeviceMotionEvent && DeviceMotionEvent.requestPermission) {
		DeviceMotionEvent.requestPermission().then(
			function(state) {
				if (state == "granted") {
					callback(null);
				} else callback(new Error("Permission denied by user"));
			},
			function(err) {
				callback(err);
			}
		);
	} else if (window.ondevicemotion !== undefined) {
		callback(null);
	} else callback(new Error("DeviceMotion is not supported."));
}
//
var canvas = document.getElementById("dm_graphs");
canvas.addEventListener('touchend', async function(e) {
	if (e.target.tt > 1) {
		const blob = await (await fetch(canvas.toDataURL('image/png'))).blob();
		const filesArray = [
			new File(
				[blob],
				new Date().getTime().toString().substring(6) + '.png', {
					type: blob.type,
					lastModified: new Date().getTime()
				}
			)
		];
		const shareData = {
			files: filesArray,
		};
		navigator.share(shareData);
	}
});
canvas.addEventListener('touchstart', async function(e) {
	e.target.tt = e.touches.length;
});
var ctx = canvas.getContext("2d");
//            ctx.fillStyle = "#000000";
//            ctx.fillRect(0, 0, canvas.width, canvas.height);
//var graphX = window.innerWidth-1;
ls = 0;
t = true; // true=linegraph false=filledgraph
d = 7; // sesitivity

mc = 0;
sv = 0;
sh = 0;
lbpm = "";
mdata = Array(600).fill(0);
fdata = Array(4).fill(0);
var samples = mdata.length;
txt = document.getElementById('txt');
adata = Array(samples).fill(0);
fftsize = 1 << 31 - Math.clz32(mdata.length);

function updateFancyGraphs(e) {
    var rot = e.rotationRate;
    var gh = canvas.height;
    var gh2 = gh / 2;
    var v = rot.alpha + rot.beta + rot.gamma;
    mdata = mdata.slice(1);
    mdata[samples - 1] = v;
    mc += 1;
    if ((mc % 60 == 0) && (mc >= fftsize)) {
        //        mc = 0;

        fft = new FFT(fftsize,60);
        fft.forward(mdata.slice(mdata.length - fftsize));
        freqs = [].slice.call(fft.spectrum);
        freqs[0] = 0;
        mfreq = freqs.indexOf(Math.max(...freqs)) * (60 / 2 / (samples / 2));
        mfreq = mfreq + (30 / samples);
        console.log(mdata);
        fdata = fdata.slice(1);
        fdata[15] = mfreq;
        sv = Math.floor(10 * fft.spectrum.reduce((a,b,c)=>(c < 128) ? a + b : a, 0)) / 10;
        sh = Math.floor(10 * fft.spectrum.reduce((a,b,c)=>(c > 127) ? a + b : a, 0)) / 10;
        avg = fdata.reduce((a,c)=>{
            if (c !== 0) {
                a.count++;
                a.sum += c;
                a.avg = a.sum / a.count;
            }
            return a;
        }
        , {
            count: 0,
            sum: 0,
            avg: 0
        }).avg;
        //        avg=fdata.reduce((a, b) => a + b) / fdata.reduce((a,b)=>a+=b!=0);
        //console.log("average:",Math.round(avg*100)/100);
        bpms = adata.slice(152).map((a,b,c)=>a >= Math.max(...c.slice(b - 15, b)) ? a ** 3 : 0).map((a,b,c)=>a > Math.max(...c.slice(2)) / 4).map((a,b,c)=>(b > 15) && c.slice(b - 14, b).indexOf(a) == -1).reduce((a,c)=>{
            if (c == 0) {
                a.count++;
            } else {
                if (a.count > a.max)
                    a.max = a.count;
                a.p.push(a.count);
                a.count = 0;
            }
            return a;
        }
        , {
            count: 0,
            max: 0,
            p: []
        }).p.map(a=>Math.round(36000 / a) / 10).slice(1);
        if (typeof bpms[0] == 'undefined') {
            bpms[0] = lbpm
        } else
            lbpm = bpms[0];

        txt.innerText = "AVG Frequency: " + Math.round(avg * 100) / 100 + " Hz.";
        txt.innerText += "\nRT Frequency: " + Math.round(mfreq * 100) / 100 + " Hz.";
        txt.innerText += "\nBPM: " + lbpm;
        txt.innerText += "\nLF: " + sv;
        txt.innerText += "\nHF: " + sh;
    }
    //v=avg;
    v = 10 * v / Math.max(...mdata.slice(samples - 128));
    adata = adata.slice(1);
    adata[samples - 1] = v;
    ctx.drawImage(canvas, -1, 0);
    ctx.fillRect(graphX, 0, 1, canvas.height);
    var size = Math.max(-gh, Math.min((3 * (v)) * d, gh));
    ctx.beginPath();
    ctx.moveTo(graphX - 0.5, gh2 + ls / 2);
    ctx.lineTo(graphX + 0.5, gh2 + size / 2);
    ctx.stroke();
    ls = size;
}

function resizeCanvas() {
	var status = document.getElementById("dm_status");
	status.innerText = window.innerWidth + "x" + window.innerHeight;
	status.innerText += "  " + canvas.width + "x" + canvas.height;
	var w = window.innerWidth || document.body.offsetWidth;
	canvas.width = w / 1.5;
	canvas.height = window.innerHeight / 1.5;
	graphX = canvas.width - 1;
	ctx.lineWidth = 1.3; // 1.75 is nicer lookign but loses a lot of information.
	ctx.strokeStyle = "Lime";
	ctx.fillStyle = "black";
}
window.addEventListener("resize", resizeCanvas);
resizeCanvas();

function gofs(e) {
	if (document.fullscreenElement != null) {
		if (t) {
			window.removeEventListener("devicemotion", updateFancyGraphs);
		} else {
			window.addEventListener("devicemotion", updateFancyGraphs);
		}
		(t = !t)
	} else {
		document.getElementById('fs').requestFullscreen();
		const requestWakeLock = async () => {
			try {
				const wakeLock = await navigator.wakeLock.request('screen');
				setTimeout(() => window.screen.orientation.lock("landscape"), 50)
			} catch (err) {
				// The wake lock request fails - usually system-related, such as low battery.
				console.log(`${err.name}, ${err.message}`);
			}
		}
		requestWakeLock();
	}
}
sdata=[5.2,5.2,3.9999999999999996,1.3,1.3,0.5000000000000001,-1.4000000000000001,-1.4000000000000001,-1.9,-0.6000000000000002,1.0000000000000002,0.30000000000000004,-0.9000000000000001,-1,0.30000000000000004,1.2,1.4,1.0000000000000002,0.4,0.09999999999999998,-0.19999999999999996,-0.5,-0.6000000000000001,-0.2,0.3999999999999999,0.8000000000000002,0.7000000000000002,0.10000000000000006,-1,-1,-1,-0.9,-0.8,-0.3999999999999999,0.5,1.2000000000000002,1.3,0.8,-0.1,-0.29999999999999993,-2.2,-2.2,-4.100000000000001,-0.2,-0.2,3,4.3,3.4,2.0999999999999996,0.9000000000000001,0.7000000000000001,0.2,-1.5999999999999999,-1.5999999999999999,-0.5,0.2,0.2,-1.1,-1.0000000000000002,0.2,1.5,2,1.4000000000000001,0.5,-0.2,-0.6000000000000001,-0.9000000000000001,-0.7000000000000002,-0.2,0.30000000000000004,0.5000000000000001,0.40000000000000013,0.30000000000000004,0.10000000000000003,-0.20000000000000004,-0.30000000000000004,-0.4,-0.2,0.1,0.2,0.4,0.4,5.551115123125783e-17,-0.7000000000000002,-0.4999999999999999,-0.8999999999999999,-2.3000000000000003,-3.8,-2.6,3.6,3.6,4.8,2.5,2.5,1.3000000000000003,0.4,-0.29999999999999993,-1.4000000000000001,-1.6999999999999997,-0.7000000000000003,-0.20000000000000004,-0.5000000000000001,-0.9000000000000001,5.551115123125783e-17,0.9999999999999999,1.8000000000000003,1.9000000000000001,1.5,1.2000000000000002,0.4,-0.20000000000000007,-1.0000000000000002,-0.9000000000000002,-0.7000000000000002,0.2,0.7,0.6,0.20000000000000004,0.20000000000000004,0.30000000000000004,-0.30000000000000004,-0.30000000000000004,-0.19999999999999996,-0.09999999999999995,0.2,0.30000000000000004,0.10000000000000003,-0.30000000000000004,-0.8,-0.7000000000000001,-1.0999999999999999,-2.9,-3.7000000000000006,-1.4,2.3000000000000003,5.300000000000001,3.6999999999999997,3.6999999999999997,1.8999999999999997,0.9000000000000001,0.2,-0.8,-1.5999999999999999,-0.7999999999999998,0.29999999999999993,0.2,-1.1,-1.5000000000000002,-0.7,0.8,1.2000000000000004,1.2,0.8,0.5999999999999999,0.7000000000000001,0.30000000000000004,-0.20000000000000012,-0.8999999999999999,-0.8,-0.30000000000000004,0,0.19999999999999996,0.4,-2.7755575615628914e-17,-0.30000000000000004,-0.6,0.30000000000000004,0.30000000000000004,0.7000000000000001,0.30000000000000004,0.30000000000000004,-0.4,-0.6000000000000001,-0.8000000000000002,-2.2,-3.3,-3.3,0,3.2,4.600000000000001,3.9999999999999996,2.6000000000000005,1.2000000000000002,0.30000000000000004,-0.30000000000000004,-1.0999999999999999,-1.3000000000000003,0.2,0.2,-0.3000000000000001,-1,-0.6000000000000001,0.4,1.0999999999999999,1.2,0.9000000000000001,0.5,0.30000000000000004,0,-0.29999999999999993,-0.6000000000000001,-0.6000000000000002,-0.2,0.4,0.4,0.6,0.3999999999999999,-0.30000000000000004,-0.6,-0.5,-0.20000000000000004,0.1,0.30000000000000004,0.4,-2.7755575615628914e-17,-0.5000000000000001,-0.6000000000000001,-2.1,-3.8,-3.2,0.30000000000000004,5.300000000000001,5.300000000000001,4.6000000000000005,2.8,1.0999999999999999,0.09999999999999998,-0.40000000000000013,-1.1,-1,0.10000000000000014,0.6000000000000001,-2.7755575615628914e-17,-0.7,-0.7,1.3877787807814457e-16,0.8,0.9999999999999999,0.9,0.4000000000000001,-0.20000000000000007,-0.20000000000000007,-0.5,-0.5000000000000001,-0.5000000000000001,0,0.6,0.8000000000000002,0.6000000000000001,-2.7755575615628914e-17,-0.5,-0.4,0,0.2,0.4,0.09999999999999998,0.09999999999999998,-0.7,-1.7000000000000002,-1.7000000000000002,-3.8999999999999995,-4.7,-1.9,2.5000000000000004,5.4,5.5,3.9999999999999996,2.1999999999999997,0.8999999999999999,0,-0.8000000000000002,-1.3,-0.7000000000000002,0.2,0.2,-1.0999999999999999,-1.4,-0.6000000000000001,0.7000000000000001,1.4000000000000001,1.5999999999999999,1.4,0.9000000000000001,0.5000000000000001,-0.19999999999999996,-0.7000000000000002,-0.9,-0.7000000000000001,0,0.6000000000000001,0.9000000000000001,0.3999999999999999,-0.7,-0.7,-0.6,-0.30000000000000004,0.2,0.5,0.10000000000000003,-0.6000000000000001,-0.7,-1.3000000000000003,-3.5000000000000004,-4.4,-2,2.5,5.300000000000001,5.1,3.1999999999999997,1.4000000000000001,0.1,0.1,-0.5000000000000001,-1.3,-0.9000000000000001,0.30000000000000016,-0.7000000000000001,-0.7000000000000001,-1.2,0.7999999999999999,0.7999999999999999,1.2000000000000004,1,0.9000000000000001,0.6000000000000001,0.10000000000000003,-0.7000000000000001,-1,-1.1,-0.8000000000000002,-0.20000000000000004,0.4000000000000001,0.8000000000000002,0.6000000000000001,0.29999999999999993,2.7755575615628914e-17,0,0,0.1,-2.7755575615628914e-17,-1,-1,-0.8999999999999999,-1.6,-3.8,-4.700000000000001,-1.7,3.2,6.4,5.7,3.1000000000000005,0.5,0.5,0.1,-1.0999999999999999,-2.1999999999999997,0.2000000000000001,0.2000000000000001,0.6000000000000001,-0.6000000000000001,-1.3,-0.3999999999999999,1.7999999999999998,1.4000000000000004,1.4000000000000004,0,0,-0.4,-0.6000000000000001,-1,-1,-0.6000000000000001,0.1,0.7,0.6,-2.7755575615628914e-17,-0.30000000000000004,-0.1,0,0.1,0.1,0.30000000000000004,-0.29999999999999993,-1.2,-1.2000000000000002,-2,-4.2,-1.2999999999999998,-1.2999999999999998,3.5000000000000004,5.2,5.2,2.700000000000001,1,0.4,-0.20000000000000004,-1.4000000000000004,-2.3,-1.6999999999999997,0.1,-0.6000000000000001,-0.6000000000000001,-0.20000000000000004,-0.20000000000000004,1,1,1,0.5,0.4,0.30000000000000004,-0.30000000000000004,-1.0000000000000002,-1.0000000000000002,-0.3999999999999999,0,0.19999999999999996,0.20000000000000004,0.19999999999999998,0.20000000000000004,0.20000000000000004,0.10000000000000003,0.20000000000000004,0.30000000000000004,0.30000000000000004,-0.4,-1.2999999999999998,-1.4,-4.7,-4.7,-4.2,4.4,4.4,6.3,5.2,3.0999999999999996,1.4999999999999998,-0.6000000000000001,-0.6000000000000001,-1.8000000000000003,-0.9000000000000001,-0.9000000000000001,0.6,0.30000000000000004,-0.8000000000000002,-0.8000000000000002,0.5,1.6,1.5,1.1,0.7,0.6000000000000001,-0.49999999999999994,-0.49999999999999994,-1,-0.7000000000000001,-0.7000000000000001,0.4,0.8,0.8,0.5000000000000001,-0.1,-0.6,-0.6,-0.30000000000000004,-0.20000000000000004,0.10000000000000003,-0.4,-1,-1.1,-2.3,-4.3999999999999995,-4.500000000000001,-0.7000000000000002,4.1000000000000005,6.4,5.200000000000001,2.8,1.2999999999999998,0.4,-0.4,-1.7000000000000002,-2.6999999999999997,-1.3000000000000003,1.2000000000000002,1.6,-1.5000000000000002,-1.5000000000000002,-0.6000000000000001,1.1,1.7000000000000002,1.4,0.5999999999999999,0,-0.09999999999999998,-0.5000000000000001,-1,-1,0.20000000000000004,0.20000000000000004,0.9000000000000001,0.9,0.7000000000000001,0.30000000000000004,-0.1,-0.1,-2.7755575615628914e-17,-0.1,0,-0.10000000000000003,-0.8,-1,-1.2999999999999998,-2.9,-5.2,-4.2,0.5,5.200000000000001,6.600000000000001,4.8999999999999995,2.8000000000000007,1.4999999999999998,0.5,-0.7,-2.1999999999999997,-2.8000000000000007,-1.2999999999999998,1.3,1.5,-0.5,-1.7000000000000002,-0.6000000000000001,2,1.5,0,0,-0.3999999999999999,-1.0999999999999999,-1.0999999999999999,-1.2,-0.5000000000000001,0.3,0.9,0.9999999999999999,0.9999999999999999,0.40000000000000013,-0.30000000000000004,-0.30000000000000004,-0.30000000000000004,0.1,0.2,-0.09999999999999998,-0.9999999999999999,-1.4,-1.4000000000000004,-3,-5.1000000000000005,-3.7,1,5.700000000000001,6.800000000000002,4.700000000000001,2.2,0.9000000000000001,0.1,-0.9,-1.9,-2.2,-0.8999999999999999,1.4,1.2000000000000002,-0.8,-1.9,-0.9,0.7000000000000002,1.9,1.8,1.0000000000000002,0.3,-0.1,-0.6000000000000001,-0.6000000000000001,-0.7000000000000002,-0.7000000000000001,-0.2,0.3999999999999999,0.5000000000000001,0.40000000000000013,0.20000000000000004,0,0.10000000000000003,0.4000000000000001,0.4,0.30000000000000004,0.2,-0.30000000000000016,-1.0999999999999999,-1.1000000000000003,-1.9999999999999998,-4.3,-2];
sdl=sdata.length;

function firstClick(e) {
	var status = document.getElementById("dm_status");
	if (e) status.innerText = "Requesting...";
	requestDeviceMotion(function(err) {
		if (!err) {
			status.innerText = "OK!";
			window.removeEventListener("click", firstClick);
			window.removeEventListener("touchend", firstClick);
			window.addEventListener("devicemotion", updateFancyGraphs);
			el = document.querySelector('#fs');
			el.addEventListener("click", gofs);
			if (!navigator.userAgentData.mobile) {
				var xx = 0;
				z = setInterval(() => {
					updateFancyGraphs({
						"rotationRate": {
							"alpha": sdata[xx%sdl],
							"beta": 0,
							"gamma": (xx++) & 0
						}
					});
				}, 1000 / 60)
			}
		} else if (e) {
			status.innerText = "" + err;
		}
	}, e);
	resizeCanvas();
}
window.addEventListener("click", firstClick);
//window.addEventListener("touchend", firstClick);
firstClick(false);
//ctx.font = "30px Georgia";
//ctx.fillStyle = 'yellow';
//ctx.fillText("Click here to start!", window.innerWidth / 2 - 100, 150);
